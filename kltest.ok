* e
* test3
* test
* nil
* nil
* t
* (quote foo)
* (quote 123)
* (quote foo-123)
* (quote (a b c))
* (quote (a . b))
* (quote (a . b))
* (quote (a b . c))
* (quote ((caar . cdar) cadr . cddr))
* (quote (a b c))
* (quote (quote (a b c)))
* ((lambda (x) x) (quote foo))
* ((lambda (x y) x) (quote foo) (quote bar))
* ((lambda (x y) y) (quote foo) (quote bar))
* ((lambda (x y z) x) (quote foo) (quote bar) (quote baz))
* ((lambda (x y z) y) (quote foo) (quote bar) (quote baz))
* ((lambda (x y z) z) (quote foo) (quote bar) (quote baz))
* ((lambda (x y . z) x) (quote foo) (quote bar) (quote baz))
* ((lambda (x y . z) y) (quote foo) (quote bar) (quote baz))
* ((lambda (x y . z) z) (quote foo) (quote bar) (quote baz))
* ((lambda (x y . z) z) (quote foo) (quote bar) (quote baz) (quote goo))
* ((lambda (x y . z) z) (quote foo) (quote bar))
* ((lambda (x . y) y) (quote foo))
* ((lambda (x . y) y) (quote foo) (quote bar))
* ((lambda (x . y) y) (quote foo) (quote bar) (quote baz))
* ((lambda x x))
* ((lambda x x) (quote foo))
* ((lambda x x) (quote foo) (quote bar))
* ((lambda (x) (quote 1) (quote 2) (quote 3) x) (quote foo))
* (((lambda (x) (lambda (y) (x y))) (lambda (x) x)) (quote foo))
* ((lambda (x) ((lambda (f) ((lambda (x) (f)) (quote dynamic))) (lambda nil x))) (quote lexical))
* (apply (lambda (x) x) (quote (foo)))
* (apply (lambda (x y) x) (quote (foo bar)))
* (apply (lambda (x y) y) (quote (foo bar)))
* (apply (lambda (x y z) x) (quote (foo bar baz)))
* (apply (lambda (x y z) y) (quote (foo bar baz)))
* (apply (lambda (x y z) z) (quote (foo bar baz)))
* (apply (lambda (x y . z) y) (quote (foo bar baz)))
* (apply (lambda (x . y) y) (quote (foo bar)))
* (apply (lambda x x) nil)
* (apply (lambda x x) (quote (foo bar)))
* (if t (quote 2) (quote 3))
* (if nil (quote 2) (quote 3))
* (if (quote x) (quote 2) (quote 3))
* (if (quote (x)) (quote 2) (quote 3))
* (if (quote 1) (if (quote 2) (quote 3) (quote 4)) (if (quote 5) (quote 6) (quote 7)))
* (if nil (if (quote 2) (quote 3) (quote 4)) (if (quote 5) (quote 6) (quote 7)))
* (if (quote 1) (if nil (quote 3) (quote 4)) (if (quote 5) (quote 6) (quote 7)))
* (if nil (if nil (quote 3) (quote 4)) (if nil (quote 6) (quote 7)))
* (ifnot t (quote 2))
* (ifnot (quote 1) (quote 2))
* (ifnot (quote (1)) (quote 2))
* (ifnot nil (quote 2))
* (ifnot (quote 1) (ifnot (quote 2) (quote 3)))
* (ifnot nil (ifnot (quote 2) (quote 3)))
* (ifnot nil (ifnot nil (quote 3)))
* (prog)
* (prog (quote 1))
* (prog (quote 1) (quote 2))
* (prog (quote 1) (quote 2) (quote 3))
* variable
* variable
* ((lambda (variable) (setq variable (quote baz)) variable) (quote bar))
* variable
* variable
* variable
* kwote
* (kwote nil)
* (kwote foo)
* (kwote (foo bar baz))
* (kwote (quote (1 2 3)))
* (kwote (kwote foo))
* listq
* (listq)
* (listq foo)
* (listq a b c)
* (listq (quote (1 2 3 4 5)))
* (listq (foo bar) (baz goo))
* (cons (quote a) (quote b))
* (cons (quote a) nil)
* (cons (quote a) (quote (b c)))
* (cons (quote (a b)) (quote (c d)))
* (cons nil nil)
* (car (quote (a . b)))
* (car (quote (a)))
* (car (quote (a b c)))
* (car (quote ((a . b) c . d)))
* (car (quote (1 2 3 4 5)))
* (cdr (quote (a . b)))
* (cdr (quote (a)))
* (cdr (quote (a b c)))
* (cdr (quote ((a . b) c . d)))
* (cdr (quote (1 2 3 4 5)))
* (atom nil)
* (atom t)
* (atom (quote foo))
* (atom (quote (foo . bar)))
* (atom (quote (foo bar)))
* (atom (quote (1 2 3 4 5)))
* (eq t t)
* (eq nil t)
* (eq t nil)
* (eq nil nil)
* (eq (quote foo) (quote foo))
* (eq (quote foo) (quote bar))
* (eq (cons (quote 1) nil) (cons (quote 1) nil))
* ((lambda (x) (eq x x)) (cons (quote 1) nil))
* (eq (quote foo) (quote (bar)))
* (eq (quote (a . b)) (quote foo))
* (eofp nil)
* (eofp t)
* (eofp (quote foo))
* (eofp (quote (foo . bar)))
* (eofp (quote (foo bar)))
* (eofp (quote (1 2 3 4 5)))
* (atom (gensym))
* (atom (gc))
* (setcar (quote (foo . b)) (quote foo))
* (setcdr (quote (a . foo)) (quote foo))
* (load (quote src/tree))
* (tree (quote (1 2 3)))
* (apply cons (quote (a b)))
* (apply car (quote ((a b))))
* (apply cdr (quote ((a b))))
* (apply atom (quote (foo)))
* (apply eq (quote (foo foo)))
* (apply eofp (quote (foo)))
* (atom (apply gensym nil))
* (atom (apply gc nil))
* (apply setcar (quote ((baz . bar) baz)))
* (apply setcdr (quote ((foo . baz) baz)))
* (let nil (quote foo))
* (let ((a (quote 1))) a)
* (let ((a (quote 1))) (let ((b a)) b))
* (let ((a (quote 1)) (b (quote 2)) (c (quote 3))) (list a b c))
* (let ((x (quote lexical))) (let ((f (lambda nil x))) (let ((x (quote dynamic))) (f))))
* (labels nil (quote foo))
* (labels ((a (quote 1))) a)
* (labels ((a (quote 1)) (b a)) b)
* (labels ((e (lambda (x) (if (eq x nil) t (o (cdr x))))) (o (lambda (x) (if (eq x nil) nil (e (cdr x)))))) (list (e (quote (1 2 3 4))) (o (quote (1 2 3 4)))))
* (labels ((compl (lambda (p) (lambda (x) (eq nil (p x))))) (pair (compl atom))) (list (pair nil) (pair (quote (a . b))) (pair (quote foo)) (pair (quote (1 2 3)))))
* (and)
* (and (quote foo))
* (and (quote foo) (quote bar) (quote baz))
* (and nil (quote bar) (quote baz))
* (and (quote foo) nil (quote baz))
* (and (quote foo) (quote bar) nil)
* (or)
* (or (quote foo))
* (or (quote foo) (quote bar))
* (or (quote foo) (quote bar) (quote baz))
* (or nil (quote bar) (quote baz))
* (or nil nil (quote baz))
* (or nil nil nil)
* (cond)
* (cond (t (quote foo)) (t (quote bar)))
* (cond (nil (quote foo)) (t (quote bar)))
* (cond (nil (quote foo)) (nil (quote bar)))
* (cond (nil (quote foo)) (else (quote bar)))
* (cond ((cons (quote foo) (quote bar))))
* (loop a ((x (quote (1 2 3 4 5)))) (if (eq nil x) (quote foo) (a (cdr x))))
* (loop a ((x (quote (1 2 3))) (y nil)) (if (eq nil x) y (a (cdr x) (cons x y))))
* (loop a ((ax (quote (1 2 3))) (y nil)) (loop b ((bx (quote (a b c))) (z nil)) (if (eq nil bx) (if (eq nil ax) y (a (cdr ax) (cons z y))) (b (cdr bx) (cons bx z)))))
* foo
* (qquote foo)
* (qquote (unquote foo))
* (qquote ((splice (list foo))))
* (qquote foo)
* (qquote (unquote foo))
* (qquote ((splice (list foo))))
* (qquote (1 (unquote (list (quote 2) (quote 3))) 4))
* (qquote (1 (splice (list (quote 2) (quote 3))) 4))
* (let ((g (quote g001))) (let ((b (qquote (1 2 3 (unquote g))))) (qquote (lambda ((unquote g)) (prog (splice b))))))
* (null nil)
* (null t)
* (null (quote foo))
* (null (quote (foo)))
* (not nil)
* (not t)
* (not (quote foo))
* (not (quote (foo)))
* (list)
* (list (quote 1))
* (list (quote 1) (quote 2) (quote 3) (quote 4) (quote 5))
* (list (quote (foo bar)) (eq (quote 1) (quote 1)))
* tree
* (caar tree)
* (cadr tree)
* (cdar tree)
* (cddr tree)
* (caaar tree)
* (caadr tree)
* (cadar tree)
* (caddr tree)
* (cdaar tree)
* (cdadr tree)
* (cddar tree)
* (cdddr tree)
* (reconc (quote (1 2 3)) (quote (a b c)))
* (reconc (quote (1 2 3)) (quote (a . b)))
* (reconc (quote (1 2 3)) (quote a))
* (reconc (quote (1 2 3)) nil)
* (reconc nil (quote a))
* (reconc nil (quote (a b c)))
* (reconc nil nil)
* (nreconc (quote (1 a b c)) (quote (a b c)))
* (nreconc (quote (1 a . b)) (quote (a . b)))
* (nreconc (quote (1 . a)) (quote a))
* (nreconc (quote (1)) nil)
* (nreconc nil (quote a))
* (nreconc nil (quote (a b c)))
* (nreconc nil nil)
* (rever (quote (1 2 3 4 5)))
* (rever nil)
* (conc)
* (conc (quote (a b)) (quote (c d)))
* (conc (quote (a)) (quote (b)) (quote (c)) (quote (d)))
* (conc (quote (a)) nil nil (quote (b)))
* (nconc)
* (nconc (quote (a b c d)) (quote (c d)))
* (nconc (quote (a b c d)) (quote (b c d)) (quote (c d)) (quote (d)))
* (nconc (quote (a b)) nil nil (quote (b)))
* (map atom nil)
* (map atom (quote (1 2 3 4 5)))
* (map atom (quote (1 (2) 3 (4) 5)))
* (map car (quote ((1) (2) (3))))
* (map (lambda (x) (cons x nil)) (quote (1 2 3)))
* (map cons nil nil)
* (map cons (quote (a b c)) (quote (1 2 3)))
* (map (lambda (x y) (cons y x)) (quote (1 2 3)) (quote (a b c)))
* (memb (quote a) (quote (a b c)))
* (memb (quote b) (quote (a b c)))
* (memb (quote c) (quote (a b c)))
* (memb (quote z) (quote (a b c)))
* (assoc (quote a) (quote ((a . 1) (b . 2) (c . 3))))
* (assoc (quote b) (quote ((a . 1) (b . 2) (c . 3))))
* (assoc (quote c) (quote ((a . 1) (b . 2) (c . 3))))
* (assoc (quote x) (quote ((a . 1) (b . 2) (c . 3))))
* (equal t t)
* (equal nil t)
* (equal t nil)
* (equal nil nil)
* (equal (quote foo) (quote foo))
* (equal (quote foo) (quote bar))
* (equal (cons (quote 1) nil) (cons (quote 1) nil))
* (equal (quote foo) (quote (bar)))
* (equal (quote (a . b)) (quote foo))
* (equal tree tree)
* (equal (quote (a (b) c)) (quote (a (b) c)))
* (equal (quote (a (b) c)) (quote (a (zzz) c)))
* everything fine
t
* 
